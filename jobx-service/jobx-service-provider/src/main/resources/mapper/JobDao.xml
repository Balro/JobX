<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jobxhub.service.dao.JobDao">

    <resultMap id="jobEntity" type="com.jobxhub.service.entity.JobEntity" >
        <result column="job_id"         property="jobId"/>
        <result column="agent_id"       property="agentId"/>
        <result column="agent_name"     property="agentName"/>
        <result column="user_id"        property="userId"/>
        <result column="job_type"       property="jobType"/>
        <result column="job_name"       property="jobName"/>
        <result column="command"        property="command"/>
        <result column="comment"        property="comment"/>
        <result column="exec_user"      property="execUser"/>
        <result column="cron_exp"       property="cronExp"/>
        <result column="warning"        property="warning"/>
        <result column="email"          property="email"/>
        <result column="mobile"         property="mobile"/>
        <result column="pause"          property="pause"/>
        <result column="redo"           property="redo"/>
        <result column="run_count"      property="runCount"/>
        <result column="success_exit"   property="successExit"/>
        <result column="timeout"        property="timeout"/>
        <result column="token"          property="token"/>
        <result column="update_time"    property="updateTime"/>
        <result column="create_type"    property="createType"/>
        <result column="user_name"      property="operateUname"/>
    </resultMap>

    <sql id="query_Job">
        j.job_id,
        j.agent_id,
        j.user_id,
        j.job_type,
        j.job_name,
        j.command,
        j.comment,
        j.exec_user,
        j.cron_exp,
        j.warning,
        j.email,
        j.mobile,
        j.pause,
        j.redo,
        j.run_count,
        j.success_exit,
        j.timeout,
        j.token,
        j.update_time,
        j.create_type
    </sql>

    <select id="getAll" resultMap="jobEntity">
        select
        <include refid="query_Job"/>
        from  t_job as j
    </select>

    <select id="getById" parameterType="java.lang.Long" resultMap="jobEntity">
        select
        <include refid="query_Job"/>,
        a.agent_name,
        a.host as host
        from  t_job as j
        inner join t_agent a
        on j.agent_id = a.agent_id
        where j.job_id=#{jobId}
    </select>

    <select id="getByAgent" parameterType="java.lang.Long" resultMap="jobEntity">
        select
        <include refid="query_Job"/>
        from  t_job as j
        where j.agent_id = #{agentId}
    </select>

    <select id="getJobByUser" resultMap="jobEntity">
        select
        <include refid="query_Job"/>
        from  t_job as j
        where j.user_id=#{userId}
        and j.create_type=#{createType}
    </select>

    <select id="getScheduleJob" resultMap="jobEntity">
        select
        <include refid="query_Job"/>
        from  t_job as j
        where j.pause = 0
    </select>

    <select id="getByPageBean" resultMap="jobEntity">
        select
        <include refid="query_Job"/>,
        a.agent_name,
        u.user_name
        from  t_job as j
        inner join t_agent as a
        on  j.agent_id = a.agent_id
        inner join t_user as u
        on j.user_id = u.user_id
        where create_type = 1
        <if test="pager.filter.keys.size>0">
            <if test="pager.filter.job.userId != null">
                and j.user_id = #{pager.filter.job.userId}
            </if>
            <if test="pager.filter.job.agentId != null">
                and j.agent_id = #{pager.filter.job.agentId}
            </if>
            <if test="pager.filter.job.jobType != null">
                and j.job_type = #{pager.filter.job.jobType}
            </if>
            <if test="pager.filter.job.redo != null">
                and j.redo = #{pager.filter.job.redo}
            </if>
            <if test="pager.filter.job.jobName != null and pager.filter.job.jobName!='' ">
                and j.job_name like concat('%',#{pager.filter.job.jobName},'%')
            </if>
        </if>
        <if test="pager.orderBy!=null">
            <choose>
                <when test="pager.orderBy=='agent_name'">
                    order by a.${pager.orderBy} ${pager.order}
                </when>
                <otherwise>
                    order by j.${pager.orderBy} ${pager.order}
                </otherwise>
            </choose>
        </if>
        limit #{pager.offset}, #{pager.pageSize}
    </select>

    <select id="getCount" resultType="java.lang.Integer">
        select count(1) from  t_job as j
        where create_type = 1
        <if test="filter.keys.size>0">
            <if test="filter.job.userId != null">
                and j.user_id = #{filter.job.userId}
            </if>
            <if test="filter.job.agentId != null">
                and j.agent_id = #{filter.job.agentId}
            </if>
            <if test="filter.job.jobType != null">
                and j.job_type = #{filter.job.jobType}
            </if>
            <if test="filter.job.redo != null">
                and j.redo = #{filter.job.redo}
            </if>
            <if test=" filter.job.jobName != null and filter.job.jobName != '' ">
                and j.job_name like concat('%',#{filter.job.jobName},'%')
            </if>
        </if>
    </select>

    <select id="existsCount" resultType="java.lang.Integer">
        select count(1) from  t_job as j
        where j.agent_id = #{agentId}
        and j.job_name  = #{name}
        <if test="jobId!=null">
            and j.job_id <![CDATA[ <>  ]]>#{jobId}
        </if>
    </select>

    <insert id="addDependency" parameterType="com.jobxhub.service.entity.JobEntity" useGeneratedKeys="true" keyProperty="jobId">
        insert into t_job (
            agent_id,
            user_id,
            job_type,
            job_name,
            command,
            success_exit,
            create_type,
            exec_user
        ) values (
            #{agentId},
            #{userId},
            #{jobType},
            #{jobName},
            #{command},
            #{successExit},
            #{createType},
            #{execUser}
        )
    </insert>


    <insert id="save" parameterType="com.jobxhub.service.entity.JobEntity" useGeneratedKeys="true" keyProperty="jobId">
        insert into t_job (
            agent_id,
            user_id,
            job_type,
            job_name,
            command,
            comment,
            exec_user,
            cron_exp,
            warning,
            email,
            mobile,
            pause,
            redo,
            run_count,
            success_exit,
            timeout,
            token,
            update_time,
            create_type
        ) values (
            #{agentId},
            #{userId},
            #{jobType},
            #{jobName},
            #{command},
            #{comment},
            #{execUser},
            #{cronExp},
            #{warning},
            #{email},
            #{mobile},
            #{pause},
            #{redo},
            #{runCount},
            #{successExit},
            #{timeout},
            #{token},
            #{updateTime},
            #{createType}
        )
    </insert>

    <update id="update" parameterType="com.jobxhub.service.entity.JobEntity">
        update t_job
        set
            agent_id      =     #{agentId},
            user_id       =     #{userId},
            job_type      =     #{jobType},
            job_name      =     #{jobName},
            command       =     #{command},
            comment       =     #{comment},
            exec_user     =     #{execUser},
            cron_exp      =     #{cronExp},
            warning       =     #{warning},
            email         =     #{email},
            mobile        =     #{mobile},
            redo          =     #{redo},
            run_count     =     #{runCount},
            success_exit  =     #{successExit},
            timeout       =     #{timeout},
            token         =     #{token},
            update_time   =     #{updateTime},
            create_type   =     #{createType}
        where job_id      =     #{jobId}
	</update>

    <update id="updateToken">
        update t_job
        set token = #{token}
        where job_id = #{jobId}
    </update>

    <update id="pause">
        update t_job
        set pause = #{pause}
        where job_id = #{jobId}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        delete from t_job where job_id=#{id}
    </delete>

</mapper>